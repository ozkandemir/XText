/*
* generated by Xtext
*/
package com.ykb.umap.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.ykb.umap.dsl.services.ProductGrammarAccess;

public class ProductParser extends AbstractContentAssistParser {
	
	@Inject
	private ProductGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.ykb.umap.dsl.ui.contentassist.antlr.internal.InternalProductParser createParser() {
		com.ykb.umap.dsl.ui.contentassist.antlr.internal.InternalProductParser result = new com.ykb.umap.dsl.ui.contentassist.antlr.internal.InternalProductParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getUMAPDataTypesAccess().getAlternatives(), "rule__UMAPDataTypes__Alternatives");
					put(grammarAccess.getOPERATORSAccess().getAlternatives(), "rule__OPERATORS__Alternatives");
					put(grammarAccess.getCompilationUnitAccess().getGroup(), "rule__CompilationUnit__Group__0");
					put(grammarAccess.getUseUnitAccess().getGroup(), "rule__UseUnit__Group__0");
					put(grammarAccess.getNamespaceUnitAccess().getGroup(), "rule__NamespaceUnit__Group__0");
					put(grammarAccess.getQUALIFIEDIDAccess().getGroup(), "rule__QUALIFIEDID__Group__0");
					put(grammarAccess.getQUALIFIEDIDAccess().getGroup_1(), "rule__QUALIFIEDID__Group_1__0");
					put(grammarAccess.getProductUnitAccess().getGroup(), "rule__ProductUnit__Group__0");
					put(grammarAccess.getProductUnitAccess().getGroup_2(), "rule__ProductUnit__Group_2__0");
					put(grammarAccess.getParameterElementAccess().getGroup(), "rule__ParameterElement__Group__0");
					put(grammarAccess.getParameterElementAccess().getGroup_1(), "rule__ParameterElement__Group_1__0");
					put(grammarAccess.getOperationUnitAccess().getGroup(), "rule__OperationUnit__Group__0");
					put(grammarAccess.getOperationUnitAccess().getGroup_3(), "rule__OperationUnit__Group_3__0");
					put(grammarAccess.getControlElementAccess().getGroup(), "rule__ControlElement__Group__0");
					put(grammarAccess.getExpressionElementAccess().getGroup(), "rule__ExpressionElement__Group__0");
					put(grammarAccess.getControlStatementElementAccess().getGroup(), "rule__ControlStatementElement__Group__0");
					put(grammarAccess.getProductAccess().getElementsAssignment(), "rule__Product__ElementsAssignment");
					put(grammarAccess.getCompilationUnitAccess().getNamespaceUnitAssignment_0(), "rule__CompilationUnit__NamespaceUnitAssignment_0");
					put(grammarAccess.getCompilationUnitAccess().getUseUnitAssignment_1(), "rule__CompilationUnit__UseUnitAssignment_1");
					put(grammarAccess.getCompilationUnitAccess().getProductUnitAssignment_2(), "rule__CompilationUnit__ProductUnitAssignment_2");
					put(grammarAccess.getUseUnitAccess().getProductUnitAssignment_1(), "rule__UseUnit__ProductUnitAssignment_1");
					put(grammarAccess.getNamespaceUnitAccess().getNameAssignment_1(), "rule__NamespaceUnit__NameAssignment_1");
					put(grammarAccess.getProductUnitAccess().getNameAssignment_1(), "rule__ProductUnit__NameAssignment_1");
					put(grammarAccess.getProductUnitAccess().getParametersAssignment_2_1(), "rule__ProductUnit__ParametersAssignment_2_1");
					put(grammarAccess.getProductUnitAccess().getOperationUnitAssignment_3(), "rule__ProductUnit__OperationUnitAssignment_3");
					put(grammarAccess.getParameterElementAccess().getNameAssignment_0(), "rule__ParameterElement__NameAssignment_0");
					put(grammarAccess.getParameterElementAccess().getTypeAssignment_1_1(), "rule__ParameterElement__TypeAssignment_1_1");
					put(grammarAccess.getOperationUnitAccess().getNameAssignment_1(), "rule__OperationUnit__NameAssignment_1");
					put(grammarAccess.getOperationUnitAccess().getControlsAssignment_3_1(), "rule__OperationUnit__ControlsAssignment_3_1");
					put(grammarAccess.getControlElementAccess().getExpressionAssignment_0(), "rule__ControlElement__ExpressionAssignment_0");
					put(grammarAccess.getControlElementAccess().getControlStatementAssignment_2(), "rule__ControlElement__ControlStatementAssignment_2");
					put(grammarAccess.getExpressionElementAccess().getParameterAssignment_0(), "rule__ExpressionElement__ParameterAssignment_0");
					put(grammarAccess.getExpressionElementAccess().getOperatorAssignment_1(), "rule__ExpressionElement__OperatorAssignment_1");
					put(grammarAccess.getExpressionElementAccess().getRightAssignment_2(), "rule__ExpressionElement__RightAssignment_2");
					put(grammarAccess.getControlStatementElementAccess().getMessageAssignment_3(), "rule__ControlStatementElement__MessageAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.ykb.umap.dsl.ui.contentassist.antlr.internal.InternalProductParser typedParser = (com.ykb.umap.dsl.ui.contentassist.antlr.internal.InternalProductParser) parser;
			typedParser.entryRuleProduct();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ProductGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ProductGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
