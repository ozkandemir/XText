/*
* generated by Xtext
*/
grammar InternalProduct;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.ykb.umap.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.ykb.umap.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.ykb.umap.dsl.services.ProductGrammarAccess;

}

@parser::members {
 
 	private ProductGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ProductGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProduct
entryRuleProduct 
:
{ before(grammarAccess.getProductRule()); }
	 ruleProduct
{ after(grammarAccess.getProductRule()); } 
	 EOF 
;

// Rule Product
ruleProduct
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProductAccess().getElementsAssignment()); }
(rule__Product__ElementsAssignment)
{ after(grammarAccess.getProductAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractElement
entryRuleAbstractElement 
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractElementAccess().getGroup()); }
(rule__AbstractElement__Group__0)
{ after(grammarAccess.getAbstractElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceElement
entryRuleNamespaceElement 
:
{ before(grammarAccess.getNamespaceElementRule()); }
	 ruleNamespaceElement
{ after(grammarAccess.getNamespaceElementRule()); } 
	 EOF 
;

// Rule NamespaceElement
ruleNamespaceElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceElementAccess().getGroup()); }
(rule__NamespaceElement__Group__0)
{ after(grammarAccess.getNamespaceElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProductElement
entryRuleProductElement 
:
{ before(grammarAccess.getProductElementRule()); }
	 ruleProductElement
{ after(grammarAccess.getProductElementRule()); } 
	 EOF 
;

// Rule ProductElement
ruleProductElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProductElementAccess().getGroup()); }
(rule__ProductElement__Group__0)
{ after(grammarAccess.getProductElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiParameterElement
entryRuleMultiParameterElement 
:
{ before(grammarAccess.getMultiParameterElementRule()); }
	 ruleMultiParameterElement
{ after(grammarAccess.getMultiParameterElementRule()); } 
	 EOF 
;

// Rule MultiParameterElement
ruleMultiParameterElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiParameterElementAccess().getParamsAssignment()); }
(rule__MultiParameterElement__ParamsAssignment)*
{ after(grammarAccess.getMultiParameterElementAccess().getParamsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterElement
entryRuleParameterElement 
:
{ before(grammarAccess.getParameterElementRule()); }
	 ruleParameterElement
{ after(grammarAccess.getParameterElementRule()); } 
	 EOF 
;

// Rule ParameterElement
ruleParameterElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterElementAccess().getGroup()); }
(rule__ParameterElement__Group__0)
{ after(grammarAccess.getParameterElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperationElement
entryRuleOperationElement 
:
{ before(grammarAccess.getOperationElementRule()); }
	 ruleOperationElement
{ after(grammarAccess.getOperationElementRule()); } 
	 EOF 
;

// Rule OperationElement
ruleOperationElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationElementAccess().getGroup()); }
(rule__OperationElement__Group__0)
{ after(grammarAccess.getOperationElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleControlBlockElement
entryRuleControlBlockElement 
:
{ before(grammarAccess.getControlBlockElementRule()); }
	 ruleControlBlockElement
{ after(grammarAccess.getControlBlockElementRule()); } 
	 EOF 
;

// Rule ControlBlockElement
ruleControlBlockElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getControlBlockElementAccess().getGroup()); }
(rule__ControlBlockElement__Group__0)
{ after(grammarAccess.getControlBlockElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleControlStatementElement
entryRuleControlStatementElement 
:
{ before(grammarAccess.getControlStatementElementRule()); }
	 ruleControlStatementElement
{ after(grammarAccess.getControlStatementElementRule()); } 
	 EOF 
;

// Rule ControlStatementElement
ruleControlStatementElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getControlStatementElementAccess().getGroup()); }
(rule__ControlStatementElement__Group__0)
{ after(grammarAccess.getControlStatementElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionElement
entryRuleExpressionElement 
:
{ before(grammarAccess.getExpressionElementRule()); }
	 ruleExpressionElement
{ after(grammarAccess.getExpressionElementRule()); } 
	 EOF 
;

// Rule ExpressionElement
ruleExpressionElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionElementAccess().getGroup()); }
(rule__ExpressionElement__Group__0)
{ after(grammarAccess.getExpressionElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleStatementElement
entryRuleStatementElement 
:
{ before(grammarAccess.getStatementElementRule()); }
	 ruleStatementElement
{ after(grammarAccess.getStatementElementRule()); } 
	 EOF 
;

// Rule StatementElement
ruleStatementElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementElementAccess().getSssKeyword()); }

	'sss' 

{ after(grammarAccess.getStatementElementAccess().getSssKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleQualifiedID
entryRuleQualifiedID 
:
{ before(grammarAccess.getQualifiedIDRule()); }
	 ruleQualifiedID
{ after(grammarAccess.getQualifiedIDRule()); } 
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedIDAccess().getGroup()); }
(rule__QualifiedID__Group__0)
{ after(grammarAccess.getQualifiedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUseStatement
entryRuleUseStatement 
:
{ before(grammarAccess.getUseStatementRule()); }
	 ruleUseStatement
{ after(grammarAccess.getUseStatementRule()); } 
	 EOF 
;

// Rule UseStatement
ruleUseStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUseStatementAccess().getGroup()); }
(rule__UseStatement__Group__0)
{ after(grammarAccess.getUseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ParameterElement__TypeAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypeBRANCHKeyword_1_1_0_0()); }

	'BRANCH' 

{ after(grammarAccess.getParameterElementAccess().getTypeBRANCHKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getParameterElementAccess().getTypeCLIENTKeyword_1_1_0_1()); }

	'CLIENT' 

{ after(grammarAccess.getParameterElementAccess().getTypeCLIENTKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getParameterElementAccess().getTypeCURRENCYKeyword_1_1_0_2()); }

	'CURRENCY' 

{ after(grammarAccess.getParameterElementAccess().getTypeCURRENCYKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getParameterElementAccess().getTypeIDTerminalRuleCall_1_1_0_3()); }
	RULE_ID
{ after(grammarAccess.getParameterElementAccess().getTypeIDTerminalRuleCall_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__OperatorAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getOperatorEqualsSignGreaterThanSignKeyword_1_0_0()); }

	'=>' 

{ after(grammarAccess.getExpressionElementAccess().getOperatorEqualsSignGreaterThanSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionElementAccess().getOperatorIsKeyword_1_0_1()); }

	'is' 

{ after(grammarAccess.getExpressionElementAccess().getOperatorIsKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getExpressionElementAccess().getOperatorIsNotKeyword_1_0_2()); }

	'is not' 

{ after(grammarAccess.getExpressionElementAccess().getOperatorIsNotKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__RightAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getRightValidKeyword_2_0_0()); }

	'valid' 

{ after(grammarAccess.getExpressionElementAccess().getRightValidKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionElementAccess().getRightEmptyKeyword_2_0_1()); }

	'empty' 

{ after(grammarAccess.getExpressionElementAccess().getRightEmptyKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__AbstractElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractElement__Group__0__Impl
	rule__AbstractElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getNamespaceAssignment_0()); }
(rule__AbstractElement__NamespaceAssignment_0)
{ after(grammarAccess.getAbstractElementAccess().getNamespaceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractElement__Group__1__Impl
	rule__AbstractElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getUseAssignment_1()); }
(rule__AbstractElement__UseAssignment_1)?
{ after(grammarAccess.getAbstractElementAccess().getUseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getProductAssignment_2()); }
(rule__AbstractElement__ProductAssignment_2)
{ after(grammarAccess.getAbstractElementAccess().getProductAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamespaceElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceElement__Group__0__Impl
	rule__NamespaceElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceElementAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getNamespaceElementAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceElementAccess().getNameAssignment_1()); }
(rule__NamespaceElement__NameAssignment_1)
{ after(grammarAccess.getNamespaceElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProductElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProductElement__Group__0__Impl
	rule__ProductElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getProductKeyword_0()); }

	'product' 

{ after(grammarAccess.getProductElementAccess().getProductKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProductElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProductElement__Group__1__Impl
	rule__ProductElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getNameAssignment_1()); }
(rule__ProductElement__NameAssignment_1)
{ after(grammarAccess.getProductElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProductElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProductElement__Group__2__Impl
	rule__ProductElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getGroup_2()); }
(rule__ProductElement__Group_2__0)?
{ after(grammarAccess.getProductElementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProductElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProductElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getOperationAssignment_3()); }
(rule__ProductElement__OperationAssignment_3)
{ after(grammarAccess.getProductElementAccess().getOperationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProductElement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProductElement__Group_2__0__Impl
	rule__ProductElement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getParametersKeyword_2_0()); }

	'parameters' 

{ after(grammarAccess.getProductElementAccess().getParametersKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProductElement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProductElement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getParametersAssignment_2_1()); }
(rule__ProductElement__ParametersAssignment_2_1)
{ after(grammarAccess.getProductElementAccess().getParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group__0__Impl
	rule__ParameterElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getNameAssignment_0()); }
(rule__ParameterElement__NameAssignment_0)
{ after(grammarAccess.getParameterElementAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getGroup_1()); }
(rule__ParameterElement__Group_1__0)?
{ after(grammarAccess.getParameterElementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterElement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1__0__Impl
	rule__ParameterElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getColonKeyword_1_0()); }

	':' 

{ after(grammarAccess.getParameterElementAccess().getColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypeAssignment_1_1()); }
(rule__ParameterElement__TypeAssignment_1_1)
{ after(grammarAccess.getParameterElementAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationElement__Group__0__Impl
	rule__OperationElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationElementAccess().getOperationKeyword_0()); }

	'operation' 

{ after(grammarAccess.getOperationElementAccess().getOperationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationElement__Group__1__Impl
	rule__OperationElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationElementAccess().getNameAssignment_1()); }
(rule__OperationElement__NameAssignment_1)
{ after(grammarAccess.getOperationElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationElement__Group__2__Impl
	rule__OperationElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationElementAccess().getIsKeyword_2()); }

	'is' 

{ after(grammarAccess.getOperationElementAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationElementAccess().getControlsAssignment_3()); }
(rule__OperationElement__ControlsAssignment_3)?
{ after(grammarAccess.getOperationElementAccess().getControlsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ControlBlockElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ControlBlockElement__Group__0__Impl
	rule__ControlBlockElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlBlockElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlBlockElementAccess().getControlsKeyword_0()); }

	'controls' 

{ after(grammarAccess.getControlBlockElementAccess().getControlsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ControlBlockElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ControlBlockElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlBlockElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlBlockElementAccess().getControlsAssignment_1()); }
(rule__ControlBlockElement__ControlsAssignment_1)
{ after(grammarAccess.getControlBlockElementAccess().getControlsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ControlStatementElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ControlStatementElement__Group__0__Impl
	rule__ControlStatementElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatementElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlStatementElementAccess().getExpressionAssignment_0()); }
(rule__ControlStatementElement__ExpressionAssignment_0)
{ after(grammarAccess.getControlStatementElementAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ControlStatementElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ControlStatementElement__Group__1__Impl
	rule__ControlStatementElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatementElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlStatementElementAccess().getEqualsSignGreaterThanSignKeyword_1()); }

	'=>' 

{ after(grammarAccess.getControlStatementElementAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ControlStatementElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ControlStatementElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatementElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlStatementElementAccess().getStatementAssignment_2()); }
(rule__ControlStatementElement__StatementAssignment_2)
{ after(grammarAccess.getControlStatementElementAccess().getStatementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionElement__Group__0__Impl
	rule__ExpressionElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getParameterAssignment_0()); }
(rule__ExpressionElement__ParameterAssignment_0)
{ after(grammarAccess.getExpressionElementAccess().getParameterAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionElement__Group__1__Impl
	rule__ExpressionElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getOperatorAssignment_1()); }
(rule__ExpressionElement__OperatorAssignment_1)
{ after(grammarAccess.getExpressionElementAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getRightAssignment_2()); }
(rule__ExpressionElement__RightAssignment_2)
{ after(grammarAccess.getExpressionElementAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group__0__Impl
	rule__QualifiedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getGroup_1()); }
(rule__QualifiedID__Group_1__0)*
{ after(grammarAccess.getQualifiedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group_1__0__Impl
	rule__QualifiedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseStatement__Group__0__Impl
	rule__UseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseStatementAccess().getUseKeyword_0()); }

	'use' 

{ after(grammarAccess.getUseStatementAccess().getUseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseStatementAccess().getProductAssignment_1()); }
(rule__UseStatement__ProductAssignment_1)
{ after(grammarAccess.getUseStatementAccess().getProductAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Product__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductAccess().getElementsAbstractElementParserRuleCall_0()); }
	ruleAbstractElement{ after(grammarAccess.getProductAccess().getElementsAbstractElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__NamespaceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getNamespaceNamespaceElementParserRuleCall_0_0()); }
	ruleNamespaceElement{ after(grammarAccess.getAbstractElementAccess().getNamespaceNamespaceElementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__UseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getUseUseStatementParserRuleCall_1_0()); }
	ruleUseStatement{ after(grammarAccess.getAbstractElementAccess().getUseUseStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__ProductAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getProductProductElementParserRuleCall_2_0()); }
	ruleProductElement{ after(grammarAccess.getAbstractElementAccess().getProductProductElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceElement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceElementAccess().getNameQualifiedIDParserRuleCall_1_0()); }
	ruleQualifiedID{ after(grammarAccess.getNamespaceElementAccess().getNameQualifiedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProductElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__ParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getParametersMultiParameterElementParserRuleCall_2_1_0()); }
	ruleMultiParameterElement{ after(grammarAccess.getProductElementAccess().getParametersMultiParameterElementParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProductElement__OperationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProductElementAccess().getOperationOperationElementParserRuleCall_3_0()); }
	ruleOperationElement{ after(grammarAccess.getProductElementAccess().getOperationOperationElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiParameterElement__ParamsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiParameterElementAccess().getParamsParameterElementParserRuleCall_0()); }
	ruleParameterElement{ after(grammarAccess.getMultiParameterElementAccess().getParamsParameterElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParameterElementAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypeAlternatives_1_1_0()); }
(rule__ParameterElement__TypeAlternatives_1_1_0)
{ after(grammarAccess.getParameterElementAccess().getTypeAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationElement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOperationElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationElement__ControlsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationElementAccess().getControlsControlBlockElementParserRuleCall_3_0()); }
	ruleControlBlockElement{ after(grammarAccess.getOperationElementAccess().getControlsControlBlockElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ControlBlockElement__ControlsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlBlockElementAccess().getControlsControlStatementElementParserRuleCall_1_0()); }
	ruleControlStatementElement{ after(grammarAccess.getControlBlockElementAccess().getControlsControlStatementElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatementElement__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlStatementElementAccess().getExpressionExpressionElementParserRuleCall_0_0()); }
	ruleExpressionElement{ after(grammarAccess.getControlStatementElementAccess().getExpressionExpressionElementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatementElement__StatementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControlStatementElementAccess().getStatementStatementElementParserRuleCall_2_0()); }
	ruleStatementElement{ after(grammarAccess.getControlStatementElementAccess().getStatementStatementElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__ParameterAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getParameterParameterElementCrossReference_0_0()); }
(
{ before(grammarAccess.getExpressionElementAccess().getParameterParameterElementIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getExpressionElementAccess().getParameterParameterElementIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getExpressionElementAccess().getParameterParameterElementCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getOperatorAlternatives_1_0()); }
(rule__ExpressionElement__OperatorAlternatives_1_0)
{ after(grammarAccess.getExpressionElementAccess().getOperatorAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionElement__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionElementAccess().getRightAlternatives_2_0()); }
(rule__ExpressionElement__RightAlternatives_2_0)
{ after(grammarAccess.getExpressionElementAccess().getRightAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseStatement__ProductAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseStatementAccess().getProductProductElementCrossReference_1_0()); }
(
{ before(grammarAccess.getUseStatementAccess().getProductProductElementIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getUseStatementAccess().getProductProductElementIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getUseStatementAccess().getProductProductElementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


