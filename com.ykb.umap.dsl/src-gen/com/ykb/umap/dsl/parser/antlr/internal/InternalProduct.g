/*
* generated by Xtext
*/
grammar InternalProduct;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.ykb.umap.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ykb.umap.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ykb.umap.dsl.services.ProductGrammarAccess;

}

@parser::members {

 	private ProductGrammarAccess grammarAccess;
 	
    public InternalProductParser(TokenStream input, ProductGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Product";	
   	}
   	
   	@Override
   	protected ProductGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	 iv_ruleProduct=ruleProduct 
	 { $current=$iv_ruleProduct.current; } 
	 EOF 
;

// Rule Product
ruleProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductAccess().getElementsAbstractElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractElementAccess().getNamespaceNamespaceElementParserRuleCall_0_0()); 
	    }
		lv_namespace_0_0=ruleNamespaceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractElementRule());
	        }
       		set(
       			$current, 
       			"namespace",
        		lv_namespace_0_0, 
        		"NamespaceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractElementAccess().getUseUseStatementParserRuleCall_1_0()); 
	    }
		lv_use_1_0=ruleUseStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractElementRule());
	        }
       		set(
       			$current, 
       			"use",
        		lv_use_1_0, 
        		"UseStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractElementAccess().getProductProductElementParserRuleCall_2_0()); 
	    }
		lv_product_2_0=ruleProductElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractElementRule());
	        }
       		set(
       			$current, 
       			"product",
        		lv_product_2_0, 
        		"ProductElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNamespaceElement
entryRuleNamespaceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceElementRule()); }
	 iv_ruleNamespaceElement=ruleNamespaceElement 
	 { $current=$iv_ruleNamespaceElement.current; } 
	 EOF 
;

// Rule NamespaceElement
ruleNamespaceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceElementAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceElementAccess().getNameQualifiedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProductElement
entryRuleProductElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductElementRule()); }
	 iv_ruleProductElement=ruleProductElement 
	 { $current=$iv_ruleProductElement.current; } 
	 EOF 
;

// Rule ProductElement
ruleProductElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='product' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProductElementAccess().getProductKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProductElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='parameters' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProductElementAccess().getParametersKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductElementAccess().getParametersMultiParameterElementParserRuleCall_2_1_0()); 
	    }
		lv_parameters_3_0=ruleMultiParameterElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductElementRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"MultiParameterElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getProductElementAccess().getOperationOperationElementParserRuleCall_3_0()); 
	    }
		lv_operation_4_0=ruleOperationElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductElementRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_4_0, 
        		"OperationElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMultiParameterElement
entryRuleMultiParameterElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiParameterElementRule()); }
	 iv_ruleMultiParameterElement=ruleMultiParameterElement 
	 { $current=$iv_ruleMultiParameterElement.current; } 
	 EOF 
;

// Rule MultiParameterElement
ruleMultiParameterElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiParameterElementAccess().getParamsParameterElementParserRuleCall_0()); 
	    }
		lv_params_0_0=ruleParameterElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiParameterElementRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_0_0, 
        		"ParameterElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleParameterElement
entryRuleParameterElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterElementRule()); }
	 iv_ruleParameterElement=ruleParameterElement 
	 { $current=$iv_ruleParameterElement.current; } 
	 EOF 
;

// Rule ParameterElement
ruleParameterElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterElementAccess().getColonKeyword_1_0());
    }
(
(
(
		lv_type_2_1=	'BRANCH' 
    {
        newLeafNode(lv_type_2_1, grammarAccess.getParameterElementAccess().getTypeBRANCHKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterElementRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_2_1, null);
	    }

    |		lv_type_2_2=	'CLIENT' 
    {
        newLeafNode(lv_type_2_2, grammarAccess.getParameterElementAccess().getTypeCLIENTKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterElementRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_2_2, null);
	    }

    |		lv_type_2_3=	'CURRENCY' 
    {
        newLeafNode(lv_type_2_3, grammarAccess.getParameterElementAccess().getTypeCURRENCYKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterElementRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_2_3, null);
	    }

    |		lv_type_2_4=RULE_ID
		{
			newLeafNode(lv_type_2_4, grammarAccess.getParameterElementAccess().getTypeIDTerminalRuleCall_1_1_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_4, 
        		"ID");
	    }

)

)
))?)
;





// Entry rule entryRuleOperationElement
entryRuleOperationElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationElementRule()); }
	 iv_ruleOperationElement=ruleOperationElement 
	 { $current=$iv_ruleOperationElement.current; } 
	 EOF 
;

// Rule OperationElement
ruleOperationElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationElementAccess().getOperationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperationElementAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationElementAccess().getControlsControlBlockElementParserRuleCall_3_0()); 
	    }
		lv_controls_3_0=ruleControlBlockElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationElementRule());
	        }
       		set(
       			$current, 
       			"controls",
        		lv_controls_3_0, 
        		"ControlBlockElement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleControlBlockElement
entryRuleControlBlockElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlBlockElementRule()); }
	 iv_ruleControlBlockElement=ruleControlBlockElement 
	 { $current=$iv_ruleControlBlockElement.current; } 
	 EOF 
;

// Rule ControlBlockElement
ruleControlBlockElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='controls' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getControlBlockElementAccess().getControlsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlBlockElementAccess().getControlsControlStatementElementParserRuleCall_1_0()); 
	    }
		lv_controls_1_0=ruleControlStatementElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlBlockElementRule());
	        }
       		add(
       			$current, 
       			"controls",
        		lv_controls_1_0, 
        		"ControlStatementElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleControlStatementElement
entryRuleControlStatementElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlStatementElementRule()); }
	 iv_ruleControlStatementElement=ruleControlStatementElement 
	 { $current=$iv_ruleControlStatementElement.current; } 
	 EOF 
;

// Rule ControlStatementElement
ruleControlStatementElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getControlStatementElementAccess().getExpressionExpressionElementParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpressionElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStatementElementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"ExpressionElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getControlStatementElementAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlStatementElementAccess().getStatementStatementElementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatementElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStatementElementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"StatementElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionElement
entryRuleExpressionElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionElementRule()); }
	 iv_ruleExpressionElement=ruleExpressionElement 
	 { $current=$iv_ruleExpressionElement.current; } 
	 EOF 
;

// Rule ExpressionElement
ruleExpressionElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getExpressionElementAccess().getParameterParameterElementCrossReference_0_0()); 
	}

)
)(
(
(
		lv_operator_1_1=	'=>' 
    {
        newLeafNode(lv_operator_1_1, grammarAccess.getExpressionElementAccess().getOperatorEqualsSignGreaterThanSignKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_1, null);
	    }

    |		lv_operator_1_2=	'is' 
    {
        newLeafNode(lv_operator_1_2, grammarAccess.getExpressionElementAccess().getOperatorIsKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_2, null);
	    }

    |		lv_operator_1_3=	'is not' 
    {
        newLeafNode(lv_operator_1_3, grammarAccess.getExpressionElementAccess().getOperatorIsNotKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_3, null);
	    }

)

)
)(
(
(
		lv_right_2_1=	'valid' 
    {
        newLeafNode(lv_right_2_1, grammarAccess.getExpressionElementAccess().getRightValidKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
       		setWithLastConsumed($current, "right", lv_right_2_1, null);
	    }

    |		lv_right_2_2=	'empty' 
    {
        newLeafNode(lv_right_2_2, grammarAccess.getExpressionElementAccess().getRightEmptyKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
       		setWithLastConsumed($current, "right", lv_right_2_2, null);
	    }

)

)
))
;







// Entry rule entryRuleStatementElement
entryRuleStatementElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementElementRule()); } 
	 iv_ruleStatementElement=ruleStatementElement 
	 { $current=$iv_ruleStatementElement.current.getText(); }  
	 EOF 
;

// Rule StatementElement
ruleStatementElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='sss' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementElementAccess().getSssKeyword()); 
    }

    ;







// Entry rule entryRuleQualifiedID
entryRuleQualifiedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIDRule()); } 
	 iv_ruleQualifiedID=ruleQualifiedID 
	 { $current=$iv_ruleQualifiedID.current.getText(); }  
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleUseStatement
entryRuleUseStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseStatementRule()); }
	 iv_ruleUseStatement=ruleUseStatement 
	 { $current=$iv_ruleUseStatement.current; } 
	 EOF 
;

// Rule UseStatement
ruleUseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='use' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUseStatementAccess().getUseKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseStatementRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getUseStatementAccess().getProductProductElementCrossReference_1_0()); 
	}

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


