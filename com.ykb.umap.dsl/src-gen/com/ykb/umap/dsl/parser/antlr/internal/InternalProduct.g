/*
* generated by Xtext
*/
grammar InternalProduct;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.ykb.umap.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ykb.umap.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ykb.umap.dsl.services.ProductGrammarAccess;

}

@parser::members {

 	private ProductGrammarAccess grammarAccess;
 	
    public InternalProductParser(TokenStream input, ProductGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Product";	
   	}
   	
   	@Override
   	protected ProductGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	 iv_ruleProduct=ruleProduct 
	 { $current=$iv_ruleProduct.current; } 
	 EOF 
;

// Rule Product
ruleProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductAccess().getElementsCompilationUnitParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleCompilationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"CompilationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current; } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getNamespaceUnitNamespaceUnitParserRuleCall_0_0()); 
	    }
		lv_namespaceUnit_0_0=ruleNamespaceUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		set(
       			$current, 
       			"namespaceUnit",
        		lv_namespaceUnit_0_0, 
        		"NamespaceUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getUseUnitUseUnitParserRuleCall_1_0()); 
	    }
		lv_useUnit_1_0=ruleUseUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		set(
       			$current, 
       			"useUnit",
        		lv_useUnit_1_0, 
        		"UseUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getProductUnitProductUnitParserRuleCall_2_0()); 
	    }
		lv_productUnit_2_0=ruleProductUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		set(
       			$current, 
       			"productUnit",
        		lv_productUnit_2_0, 
        		"ProductUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUseUnit
entryRuleUseUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseUnitRule()); }
	 iv_ruleUseUnit=ruleUseUnit 
	 { $current=$iv_ruleUseUnit.current; } 
	 EOF 
;

// Rule UseUnit
ruleUseUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='use' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUseUnitAccess().getUseKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseUnitRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUseUnitAccess().getProductUnitEProductUnitCrossReference_1_0()); 
	    }
		ruleQUALIFIEDID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNamespaceUnit
entryRuleNamespaceUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceUnitRule()); }
	 iv_ruleNamespaceUnit=ruleNamespaceUnit 
	 { $current=$iv_ruleNamespaceUnit.current; } 
	 EOF 
;

// Rule NamespaceUnit
ruleNamespaceUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceUnitAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceUnitAccess().getNameQUALIFIEDIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQUALIFIEDID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceUnitRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QUALIFIEDID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQUALIFIEDID
entryRuleQUALIFIEDID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQUALIFIEDIDRule()); } 
	 iv_ruleQUALIFIEDID=ruleQUALIFIEDID 
	 { $current=$iv_ruleQUALIFIEDID.current.getText(); }  
	 EOF 
;

// Rule QUALIFIEDID
ruleQUALIFIEDID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQUALIFIEDIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQUALIFIEDIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQUALIFIEDIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleProductUnit
entryRuleProductUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductUnitRule()); }
	 iv_ruleProductUnit=ruleProductUnit 
	 { $current=$iv_ruleProductUnit.current; } 
	 EOF 
;

// Rule ProductUnit
ruleProductUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='product' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProductUnitAccess().getProductKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProductUnitAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='parameters' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProductUnitAccess().getParametersKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductUnitAccess().getParametersParameterElementParserRuleCall_2_1_0()); 
	    }
		lv_parameters_3_0=ruleParameterElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductUnitRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"ParameterElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)(
(
		{ 
	        newCompositeNode(grammarAccess.getProductUnitAccess().getOperationUnitOperationUnitParserRuleCall_3_0()); 
	    }
		lv_operationUnit_4_0=ruleOperationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductUnitRule());
	        }
       		set(
       			$current, 
       			"operationUnit",
        		lv_operationUnit_4_0, 
        		"OperationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterElement
entryRuleParameterElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterElementRule()); }
	 iv_ruleParameterElement=ruleParameterElement 
	 { $current=$iv_ruleParameterElement.current; } 
	 EOF 
;

// Rule ParameterElement
ruleParameterElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterElementAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterElementAccess().getTypeUMAPDataTypesEnumRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleUMAPDataTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterElementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"UMAPDataTypes");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOperationUnit
entryRuleOperationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationUnitRule()); }
	 iv_ruleOperationUnit=ruleOperationUnit 
	 { $current=$iv_ruleOperationUnit.current; } 
	 EOF 
;

// Rule OperationUnit
ruleOperationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationUnitAccess().getOperationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationUnitAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperationUnitAccess().getIsKeyword_2());
    }
(	otherlv_3='controls' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationUnitAccess().getControlsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationUnitAccess().getControlsControlElementParserRuleCall_3_1_0()); 
	    }
		lv_controls_4_0=ruleControlElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationUnitRule());
	        }
       		add(
       			$current, 
       			"controls",
        		lv_controls_4_0, 
        		"ControlElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleControlElement
entryRuleControlElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlElementRule()); }
	 iv_ruleControlElement=ruleControlElement 
	 { $current=$iv_ruleControlElement.current; } 
	 EOF 
;

// Rule ControlElement
ruleControlElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getControlElementAccess().getExpressionExpressionElementParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpressionElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlElementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"ExpressionElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getControlElementAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlElementAccess().getControlStatementControlStatementElementParserRuleCall_2_0()); 
	    }
		lv_controlStatement_2_0=ruleControlStatementElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlElementRule());
	        }
       		set(
       			$current, 
       			"controlStatement",
        		lv_controlStatement_2_0, 
        		"ControlStatementElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionElement
entryRuleExpressionElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionElementRule()); }
	 iv_ruleExpressionElement=ruleExpressionElement 
	 { $current=$iv_ruleExpressionElement.current; } 
	 EOF 
;

// Rule ExpressionElement
ruleExpressionElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getExpressionElementAccess().getParameterEParameterElementCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionElementAccess().getOperatorOPERATORSEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOPERATORS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionElementRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"OPERATORS");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionElementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExpressionElementAccess().getRightEOperationUnitCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleControlStatementElement
entryRuleControlStatementElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlStatementElementRule()); }
	 iv_ruleControlStatementElement=ruleControlStatementElement 
	 { $current=$iv_ruleControlStatementElement.current; } 
	 EOF 
;

// Rule ControlStatementElement
ruleControlStatementElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Error' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getControlStatementElementAccess().getErrorKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getControlStatementElementAccess().getLeftParenthesisKeyword_1());
    }
	otherlv_2='"' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getControlStatementElementAccess().getQuotationMarkKeyword_2());
    }
(
(
		lv_message_3_0=RULE_ANY_OTHER
		{
			newLeafNode(lv_message_3_0, grammarAccess.getControlStatementElementAccess().getMessageANY_OTHERTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlStatementElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"message",
        		lv_message_3_0, 
        		"ANY_OTHER");
	    }

)
)	otherlv_4='"' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getControlStatementElementAccess().getQuotationMarkKeyword_4());
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getControlStatementElementAccess().getRightParenthesisKeyword_5());
    }
)
;





// Rule UMAPDataTypes
ruleUMAPDataTypes returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BRANCH' 
	{
        $current = grammarAccess.getUMAPDataTypesAccess().getBRANCHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUMAPDataTypesAccess().getBRANCHEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='CLIENT' 
	{
        $current = grammarAccess.getUMAPDataTypesAccess().getCLIENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUMAPDataTypesAccess().getCLIENTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='CURRENCY' 
	{
        $current = grammarAccess.getUMAPDataTypesAccess().getCURRENCYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUMAPDataTypesAccess().getCURRENCYEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='NUMBER' 
	{
        $current = grammarAccess.getUMAPDataTypesAccess().getNUMBEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getUMAPDataTypesAccess().getNUMBEREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='STRING' 
	{
        $current = grammarAccess.getUMAPDataTypesAccess().getSTRINGEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getUMAPDataTypesAccess().getSTRINGEnumLiteralDeclaration_4()); 
    }
));



// Rule OPERATORS
ruleOPERATORS returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='is' 
	{
        $current = grammarAccess.getOPERATORSAccess().getISEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOPERATORSAccess().getISEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='is not' 
	{
        $current = grammarAccess.getOPERATORSAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOPERATORSAccess().getNOTEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


