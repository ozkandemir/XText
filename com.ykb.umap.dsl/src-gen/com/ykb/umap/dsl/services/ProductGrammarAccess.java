/*
* generated by Xtext
*/
package com.ykb.umap.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ProductGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Product");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Product:
		//	elements+=AbstractElement;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceNamespaceElementParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Assignment cUseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseUseStatementParserRuleCall_1_0 = (RuleCall)cUseAssignment_1.eContents().get(0);
		private final Assignment cProductAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProductProductElementParserRuleCall_2_0 = (RuleCall)cProductAssignment_2.eContents().get(0);
		
		//AbstractElement:
		//	namespace=NamespaceElement use=UseStatement? product=ProductElement;
		public ParserRule getRule() { return rule; }

		//namespace=NamespaceElement use=UseStatement? product=ProductElement
		public Group getGroup() { return cGroup; }

		//namespace=NamespaceElement
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//NamespaceElement
		public RuleCall getNamespaceNamespaceElementParserRuleCall_0_0() { return cNamespaceNamespaceElementParserRuleCall_0_0; }

		//use=UseStatement?
		public Assignment getUseAssignment_1() { return cUseAssignment_1; }

		//UseStatement
		public RuleCall getUseUseStatementParserRuleCall_1_0() { return cUseUseStatementParserRuleCall_1_0; }

		//product=ProductElement
		public Assignment getProductAssignment_2() { return cProductAssignment_2; }

		//ProductElement
		public RuleCall getProductProductElementParserRuleCall_2_0() { return cProductProductElementParserRuleCall_2_0; }
	}

	public class NamespaceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamespaceElement:
		//	"namespace" name=QualifiedID;
		public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedID
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_1_0() { return cNameQualifiedIDParserRuleCall_1_0; }
	}

	public class ProductElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProductElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersMultiParameterElementParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationElementParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//ProductElement:
		//	"product" name=ID ("parameters" parameters=MultiParameterElement)? operation=OperationElement;
		public ParserRule getRule() { return rule; }

		//"product" name=ID ("parameters" parameters=MultiParameterElement)? operation=OperationElement
		public Group getGroup() { return cGroup; }

		//"product"
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("parameters" parameters=MultiParameterElement)?
		public Group getGroup_2() { return cGroup_2; }

		//"parameters"
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }

		//parameters=MultiParameterElement
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//MultiParameterElement
		public RuleCall getParametersMultiParameterElementParserRuleCall_2_1_0() { return cParametersMultiParameterElementParserRuleCall_2_1_0; }

		//operation=OperationElement
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }

		//OperationElement
		public RuleCall getOperationOperationElementParserRuleCall_3_0() { return cOperationOperationElementParserRuleCall_3_0; }
	}

	public class MultiParameterElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiParameterElement");
		private final Assignment cParamsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParamsParameterElementParserRuleCall_0 = (RuleCall)cParamsAssignment.eContents().get(0);
		
		//MultiParameterElement:
		//	params+=ParameterElement*;
		public ParserRule getRule() { return rule; }

		//params+=ParameterElement*
		public Assignment getParamsAssignment() { return cParamsAssignment; }

		//ParameterElement
		public RuleCall getParamsParameterElementParserRuleCall_0() { return cParamsParameterElementParserRuleCall_0; }
	}

	public class ParameterElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_1_0 = (Alternatives)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cTypeBRANCHKeyword_1_1_0_0 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTypeCLIENTKeyword_1_1_0_1 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(1);
		private final Keyword cTypeCURRENCYKeyword_1_1_0_2 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_1_1_0_3 = (RuleCall)cTypeAlternatives_1_1_0.eContents().get(3);
		
		//ParameterElement:
		//	name=ID (":" type=("BRANCH" | "CLIENT" | "CURRENCY" | ID))?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" type=("BRANCH" | "CLIENT" | "CURRENCY" | ID))?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" type=("BRANCH" | "CLIENT" | "CURRENCY" | ID))?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=("BRANCH" | "CLIENT" | "CURRENCY" | ID)
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//"BRANCH" | "CLIENT" | "CURRENCY" | ID
		public Alternatives getTypeAlternatives_1_1_0() { return cTypeAlternatives_1_1_0; }

		//"BRANCH"
		public Keyword getTypeBRANCHKeyword_1_1_0_0() { return cTypeBRANCHKeyword_1_1_0_0; }

		//"CLIENT"
		public Keyword getTypeCLIENTKeyword_1_1_0_1() { return cTypeCLIENTKeyword_1_1_0_1; }

		//"CURRENCY"
		public Keyword getTypeCURRENCYKeyword_1_1_0_2() { return cTypeCURRENCYKeyword_1_1_0_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_1_0_3() { return cTypeIDTerminalRuleCall_1_1_0_3; }
	}

	public class OperationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cControlsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cControlsControlBlockElementParserRuleCall_3_0 = (RuleCall)cControlsAssignment_3.eContents().get(0);
		
		//OperationElement:
		//	"operation" name=ID "is" controls=ControlBlockElement?;
		public ParserRule getRule() { return rule; }

		//"operation" name=ID "is" controls=ControlBlockElement?
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//controls=ControlBlockElement?
		public Assignment getControlsAssignment_3() { return cControlsAssignment_3; }

		//ControlBlockElement
		public RuleCall getControlsControlBlockElementParserRuleCall_3_0() { return cControlsControlBlockElementParserRuleCall_3_0; }
	}

	public class ControlBlockElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlBlockElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cControlsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cControlsControlStatementElementParserRuleCall_1_0 = (RuleCall)cControlsAssignment_1.eContents().get(0);
		
		//ControlBlockElement:
		//	"controls" controls+=ControlStatementElement;
		public ParserRule getRule() { return rule; }

		//"controls" controls+=ControlStatementElement
		public Group getGroup() { return cGroup; }

		//"controls"
		public Keyword getControlsKeyword_0() { return cControlsKeyword_0; }

		//controls+=ControlStatementElement
		public Assignment getControlsAssignment_1() { return cControlsAssignment_1; }

		//ControlStatementElement
		public RuleCall getControlsControlStatementElementParserRuleCall_1_0() { return cControlsControlStatementElementParserRuleCall_1_0; }
	}

	public class ControlStatementElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlStatementElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionElementParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementElementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//ControlStatementElement:
		//	expression=ExpressionElement "=>" statement=StatementElement;
		public ParserRule getRule() { return rule; }

		//expression=ExpressionElement "=>" statement=StatementElement
		public Group getGroup() { return cGroup; }

		//expression=ExpressionElement
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//ExpressionElement
		public RuleCall getExpressionExpressionElementParserRuleCall_0_0() { return cExpressionExpressionElementParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//statement=StatementElement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//StatementElement
		public RuleCall getStatementStatementElementParserRuleCall_2_0() { return cStatementStatementElementParserRuleCall_2_0; }
	}

	public class ExpressionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterParameterElementCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterParameterElementIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterParameterElementCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignGreaterThanSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorIsKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorIsNotKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRightAlternatives_2_0 = (Alternatives)cRightAssignment_2.eContents().get(0);
		private final Keyword cRightValidKeyword_2_0_0 = (Keyword)cRightAlternatives_2_0.eContents().get(0);
		private final Keyword cRightEmptyKeyword_2_0_1 = (Keyword)cRightAlternatives_2_0.eContents().get(1);
		
		//ExpressionElement:
		//	parameter=[ParameterElement] operator=("=>" | "is" | "is not") right=("valid" | "empty");
		public ParserRule getRule() { return rule; }

		//parameter=[ParameterElement] operator=("=>" | "is" | "is not") right=("valid" | "empty")
		public Group getGroup() { return cGroup; }

		//parameter=[ParameterElement]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[ParameterElement]
		public CrossReference getParameterParameterElementCrossReference_0_0() { return cParameterParameterElementCrossReference_0_0; }

		//ID
		public RuleCall getParameterParameterElementIDTerminalRuleCall_0_0_1() { return cParameterParameterElementIDTerminalRuleCall_0_0_1; }

		//operator=("=>" | "is" | "is not")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//"=>" | "is" | "is not"
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }

		//"=>"
		public Keyword getOperatorEqualsSignGreaterThanSignKeyword_1_0_0() { return cOperatorEqualsSignGreaterThanSignKeyword_1_0_0; }

		//"is"
		public Keyword getOperatorIsKeyword_1_0_1() { return cOperatorIsKeyword_1_0_1; }

		//"is not"
		public Keyword getOperatorIsNotKeyword_1_0_2() { return cOperatorIsNotKeyword_1_0_2; }

		//right=("valid" | "empty")
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//"valid" | "empty"
		public Alternatives getRightAlternatives_2_0() { return cRightAlternatives_2_0; }

		//"valid"
		public Keyword getRightValidKeyword_2_0_0() { return cRightValidKeyword_2_0_0; }

		//"empty"
		public Keyword getRightEmptyKeyword_2_0_1() { return cRightEmptyKeyword_2_0_1; }
	}

	public class StaticOperationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticOperationElement");
		private final Assignment cOpNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpNameAlternatives_0 = (Alternatives)cOpNameAssignment.eContents().get(0);
		private final Keyword cOpNameValidKeyword_0_0 = (Keyword)cOpNameAlternatives_0.eContents().get(0);
		private final Keyword cOpNameEmptyKeyword_0_1 = (Keyword)cOpNameAlternatives_0.eContents().get(1);
		
		//StaticOperationElement:
		//	opName=("valid" | "empty");
		public ParserRule getRule() { return rule; }

		//opName=("valid" | "empty")
		public Assignment getOpNameAssignment() { return cOpNameAssignment; }

		//"valid" | "empty"
		public Alternatives getOpNameAlternatives_0() { return cOpNameAlternatives_0; }

		//"valid"
		public Keyword getOpNameValidKeyword_0_0() { return cOpNameValidKeyword_0_0; }

		//"empty"
		public Keyword getOpNameEmptyKeyword_0_1() { return cOpNameEmptyKeyword_0_1; }
	}

	public class StatementElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementElement");
		private final Keyword cSssKeyword = (Keyword)rule.eContents().get(1);
		
		//StatementElement:
		//	"sss";
		public ParserRule getRule() { return rule; }

		//"sss"
		public Keyword getSssKeyword() { return cSssKeyword; }
	}

	public class OperatorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsNotKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OperatorElement:
		//	"=>" | "is" | "is not";
		public ParserRule getRule() { return rule; }

		//"=>" | "is" | "is not"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"is not"
		public Keyword getIsNotKeyword_2() { return cIsNotKeyword_2; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class UseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProductAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProductProductElementCrossReference_1_0 = (CrossReference)cProductAssignment_1.eContents().get(0);
		private final RuleCall cProductProductElementIDTerminalRuleCall_1_0_1 = (RuleCall)cProductProductElementCrossReference_1_0.eContents().get(1);
		
		//UseStatement:
		//	"use" product=[ProductElement];
		public ParserRule getRule() { return rule; }

		//"use" product=[ProductElement]
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//product=[ProductElement]
		public Assignment getProductAssignment_1() { return cProductAssignment_1; }

		//[ProductElement]
		public CrossReference getProductProductElementCrossReference_1_0() { return cProductProductElementCrossReference_1_0; }

		//ID
		public RuleCall getProductProductElementIDTerminalRuleCall_1_0_1() { return cProductProductElementIDTerminalRuleCall_1_0_1; }
	}
	
	
	private ProductElements pProduct;
	private AbstractElementElements pAbstractElement;
	private NamespaceElementElements pNamespaceElement;
	private ProductElementElements pProductElement;
	private MultiParameterElementElements pMultiParameterElement;
	private ParameterElementElements pParameterElement;
	private OperationElementElements pOperationElement;
	private ControlBlockElementElements pControlBlockElement;
	private ControlStatementElementElements pControlStatementElement;
	private ExpressionElementElements pExpressionElement;
	private StaticOperationElementElements pStaticOperationElement;
	private StatementElementElements pStatementElement;
	private OperatorElementElements pOperatorElement;
	private QualifiedIDElements pQualifiedID;
	private UseStatementElements pUseStatement;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProductGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ykb.umap.dsl.Product".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Product:
	//	elements+=AbstractElement;
	public ProductElements getProductAccess() {
		return (pProduct != null) ? pProduct : (pProduct = new ProductElements());
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}

	//AbstractElement:
	//	namespace=NamespaceElement use=UseStatement? product=ProductElement;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//NamespaceElement:
	//	"namespace" name=QualifiedID;
	public NamespaceElementElements getNamespaceElementAccess() {
		return (pNamespaceElement != null) ? pNamespaceElement : (pNamespaceElement = new NamespaceElementElements());
	}
	
	public ParserRule getNamespaceElementRule() {
		return getNamespaceElementAccess().getRule();
	}

	//ProductElement:
	//	"product" name=ID ("parameters" parameters=MultiParameterElement)? operation=OperationElement;
	public ProductElementElements getProductElementAccess() {
		return (pProductElement != null) ? pProductElement : (pProductElement = new ProductElementElements());
	}
	
	public ParserRule getProductElementRule() {
		return getProductElementAccess().getRule();
	}

	//MultiParameterElement:
	//	params+=ParameterElement*;
	public MultiParameterElementElements getMultiParameterElementAccess() {
		return (pMultiParameterElement != null) ? pMultiParameterElement : (pMultiParameterElement = new MultiParameterElementElements());
	}
	
	public ParserRule getMultiParameterElementRule() {
		return getMultiParameterElementAccess().getRule();
	}

	//ParameterElement:
	//	name=ID (":" type=("BRANCH" | "CLIENT" | "CURRENCY" | ID))?;
	public ParameterElementElements getParameterElementAccess() {
		return (pParameterElement != null) ? pParameterElement : (pParameterElement = new ParameterElementElements());
	}
	
	public ParserRule getParameterElementRule() {
		return getParameterElementAccess().getRule();
	}

	//OperationElement:
	//	"operation" name=ID "is" controls=ControlBlockElement?;
	public OperationElementElements getOperationElementAccess() {
		return (pOperationElement != null) ? pOperationElement : (pOperationElement = new OperationElementElements());
	}
	
	public ParserRule getOperationElementRule() {
		return getOperationElementAccess().getRule();
	}

	//ControlBlockElement:
	//	"controls" controls+=ControlStatementElement;
	public ControlBlockElementElements getControlBlockElementAccess() {
		return (pControlBlockElement != null) ? pControlBlockElement : (pControlBlockElement = new ControlBlockElementElements());
	}
	
	public ParserRule getControlBlockElementRule() {
		return getControlBlockElementAccess().getRule();
	}

	//ControlStatementElement:
	//	expression=ExpressionElement "=>" statement=StatementElement;
	public ControlStatementElementElements getControlStatementElementAccess() {
		return (pControlStatementElement != null) ? pControlStatementElement : (pControlStatementElement = new ControlStatementElementElements());
	}
	
	public ParserRule getControlStatementElementRule() {
		return getControlStatementElementAccess().getRule();
	}

	//ExpressionElement:
	//	parameter=[ParameterElement] operator=("=>" | "is" | "is not") right=("valid" | "empty");
	public ExpressionElementElements getExpressionElementAccess() {
		return (pExpressionElement != null) ? pExpressionElement : (pExpressionElement = new ExpressionElementElements());
	}
	
	public ParserRule getExpressionElementRule() {
		return getExpressionElementAccess().getRule();
	}

	//StaticOperationElement:
	//	opName=("valid" | "empty");
	public StaticOperationElementElements getStaticOperationElementAccess() {
		return (pStaticOperationElement != null) ? pStaticOperationElement : (pStaticOperationElement = new StaticOperationElementElements());
	}
	
	public ParserRule getStaticOperationElementRule() {
		return getStaticOperationElementAccess().getRule();
	}

	//StatementElement:
	//	"sss";
	public StatementElementElements getStatementElementAccess() {
		return (pStatementElement != null) ? pStatementElement : (pStatementElement = new StatementElementElements());
	}
	
	public ParserRule getStatementElementRule() {
		return getStatementElementAccess().getRule();
	}

	//OperatorElement:
	//	"=>" | "is" | "is not";
	public OperatorElementElements getOperatorElementAccess() {
		return (pOperatorElement != null) ? pOperatorElement : (pOperatorElement = new OperatorElementElements());
	}
	
	public ParserRule getOperatorElementRule() {
		return getOperatorElementAccess().getRule();
	}

	//QualifiedID:
	//	ID ("." ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return (pQualifiedID != null) ? pQualifiedID : (pQualifiedID = new QualifiedIDElements());
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//UseStatement:
	//	"use" product=[ProductElement];
	public UseStatementElements getUseStatementAccess() {
		return (pUseStatement != null) ? pUseStatement : (pUseStatement = new UseStatementElements());
	}
	
	public ParserRule getUseStatementRule() {
		return getUseStatementAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
