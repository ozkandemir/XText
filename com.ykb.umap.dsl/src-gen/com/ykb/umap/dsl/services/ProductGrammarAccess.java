/*
* generated by Xtext
*/
package com.ykb.umap.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ProductGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Product");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsCompilationUnitParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Product returns EProduct:
		//	elements+=CompilationUnit;
		public ParserRule getRule() { return rule; }

		//elements+=CompilationUnit
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//CompilationUnit
		public RuleCall getElementsCompilationUnitParserRuleCall_0() { return cElementsCompilationUnitParserRuleCall_0; }
	}

	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceUnitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceUnitNamespaceUnitParserRuleCall_0_0 = (RuleCall)cNamespaceUnitAssignment_0.eContents().get(0);
		private final Assignment cUseUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseUnitUseUnitParserRuleCall_1_0 = (RuleCall)cUseUnitAssignment_1.eContents().get(0);
		private final Assignment cProductUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProductUnitProductUnitParserRuleCall_2_0 = (RuleCall)cProductUnitAssignment_2.eContents().get(0);
		
		//CompilationUnit returns ECompilationUnit:
		//	namespaceUnit=NamespaceUnit useUnit=UseUnit? productUnit=ProductUnit;
		public ParserRule getRule() { return rule; }

		//namespaceUnit=NamespaceUnit useUnit=UseUnit? productUnit=ProductUnit
		public Group getGroup() { return cGroup; }

		//namespaceUnit=NamespaceUnit
		public Assignment getNamespaceUnitAssignment_0() { return cNamespaceUnitAssignment_0; }

		//NamespaceUnit
		public RuleCall getNamespaceUnitNamespaceUnitParserRuleCall_0_0() { return cNamespaceUnitNamespaceUnitParserRuleCall_0_0; }

		//useUnit=UseUnit?
		public Assignment getUseUnitAssignment_1() { return cUseUnitAssignment_1; }

		//UseUnit
		public RuleCall getUseUnitUseUnitParserRuleCall_1_0() { return cUseUnitUseUnitParserRuleCall_1_0; }

		//productUnit=ProductUnit
		public Assignment getProductUnitAssignment_2() { return cProductUnitAssignment_2; }

		//ProductUnit
		public RuleCall getProductUnitProductUnitParserRuleCall_2_0() { return cProductUnitProductUnitParserRuleCall_2_0; }
	}

	public class UseUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProductUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProductUnitEProductUnitCrossReference_1_0 = (CrossReference)cProductUnitAssignment_1.eContents().get(0);
		private final RuleCall cProductUnitEProductUnitQUALIFIEDIDParserRuleCall_1_0_1 = (RuleCall)cProductUnitEProductUnitCrossReference_1_0.eContents().get(1);
		
		//UseUnit returns EUseUnit:
		//	"use" productUnit=[EProductUnit|QUALIFIEDID];
		public ParserRule getRule() { return rule; }

		//"use" productUnit=[EProductUnit|QUALIFIEDID]
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//productUnit=[EProductUnit|QUALIFIEDID]
		public Assignment getProductUnitAssignment_1() { return cProductUnitAssignment_1; }

		//[EProductUnit|QUALIFIEDID]
		public CrossReference getProductUnitEProductUnitCrossReference_1_0() { return cProductUnitEProductUnitCrossReference_1_0; }

		//QUALIFIEDID
		public RuleCall getProductUnitEProductUnitQUALIFIEDIDParserRuleCall_1_0_1() { return cProductUnitEProductUnitQUALIFIEDIDParserRuleCall_1_0_1; }
	}

	public class NamespaceUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQUALIFIEDIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamespaceUnit returns ENamespaceUnit:
		//	"namespace" name=QUALIFIEDID;
		public ParserRule getRule() { return rule; }

		//"namespace" name=QUALIFIEDID
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QUALIFIEDID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QUALIFIEDID
		public RuleCall getNameQUALIFIEDIDParserRuleCall_1_0() { return cNameQUALIFIEDIDParserRuleCall_1_0; }
	}

	public class QUALIFIEDIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIEDID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QUALIFIEDID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ProductUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProductUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterElementParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Assignment cOperationUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationUnitOperationUnitParserRuleCall_3_0 = (RuleCall)cOperationUnitAssignment_3.eContents().get(0);
		
		//ProductUnit returns EProductUnit:
		//	"product" name=ID ("parameters" parameters+=ParameterElement*) operationUnit=OperationUnit;
		public ParserRule getRule() { return rule; }

		//"product" name=ID ("parameters" parameters+=ParameterElement*) operationUnit=OperationUnit
		public Group getGroup() { return cGroup; }

		//"product"
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"parameters" parameters+=ParameterElement*
		public Group getGroup_2() { return cGroup_2; }

		//"parameters"
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }

		//parameters+=ParameterElement*
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//ParameterElement
		public RuleCall getParametersParameterElementParserRuleCall_2_1_0() { return cParametersParameterElementParserRuleCall_2_1_0; }

		//operationUnit=OperationUnit
		public Assignment getOperationUnitAssignment_3() { return cOperationUnitAssignment_3; }

		//OperationUnit
		public RuleCall getOperationUnitOperationUnitParserRuleCall_3_0() { return cOperationUnitOperationUnitParserRuleCall_3_0; }
	}

	public class ParameterElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeUMAPDataTypesEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//ParameterElement returns EParameterElement:
		//	name=ID (":" type=UMAPDataTypes)?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" type=UMAPDataTypes)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" type=UMAPDataTypes)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=UMAPDataTypes
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//UMAPDataTypes
		public RuleCall getTypeUMAPDataTypesEnumRuleCall_1_1_0() { return cTypeUMAPDataTypesEnumRuleCall_1_1_0; }
	}

	public class OperationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cControlsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControlsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlsControlElementParserRuleCall_3_1_0 = (RuleCall)cControlsAssignment_3_1.eContents().get(0);
		
		//OperationUnit returns EOperationUnit:
		//	"operation" name=ID "is" ("controls" controls+=ControlElement)?;
		public ParserRule getRule() { return rule; }

		//"operation" name=ID "is" ("controls" controls+=ControlElement)?
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//("controls" controls+=ControlElement)?
		public Group getGroup_3() { return cGroup_3; }

		//"controls"
		public Keyword getControlsKeyword_3_0() { return cControlsKeyword_3_0; }

		//controls+=ControlElement
		public Assignment getControlsAssignment_3_1() { return cControlsAssignment_3_1; }

		//ControlElement
		public RuleCall getControlsControlElementParserRuleCall_3_1_0() { return cControlsControlElementParserRuleCall_3_1_0; }
	}

	public class ControlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionElementParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlStatementControlStatementElementParserRuleCall_2_0 = (RuleCall)cControlStatementAssignment_2.eContents().get(0);
		
		//ControlElement returns EControlElement:
		//	expression=ExpressionElement "=>" controlStatement=ControlStatementElement;
		public ParserRule getRule() { return rule; }

		//expression=ExpressionElement "=>" controlStatement=ControlStatementElement
		public Group getGroup() { return cGroup; }

		//expression=ExpressionElement
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//ExpressionElement
		public RuleCall getExpressionExpressionElementParserRuleCall_0_0() { return cExpressionExpressionElementParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//controlStatement=ControlStatementElement
		public Assignment getControlStatementAssignment_2() { return cControlStatementAssignment_2; }

		//ControlStatementElement
		public RuleCall getControlStatementControlStatementElementParserRuleCall_2_0() { return cControlStatementControlStatementElementParserRuleCall_2_0; }
	}

	public class ExpressionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterEParameterElementCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterEParameterElementIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterEParameterElementCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOPERATORSEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightEOperationUnitCrossReference_2_0 = (CrossReference)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightEOperationUnitIDTerminalRuleCall_2_0_1 = (RuleCall)cRightEOperationUnitCrossReference_2_0.eContents().get(1);
		
		//ExpressionElement returns EExpressionElement:
		//	parameter=[EParameterElement] operator=OPERATORS right=[EOperationUnit];
		public ParserRule getRule() { return rule; }

		//parameter=[EParameterElement] operator=OPERATORS right=[EOperationUnit]
		public Group getGroup() { return cGroup; }

		//parameter=[EParameterElement]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[EParameterElement]
		public CrossReference getParameterEParameterElementCrossReference_0_0() { return cParameterEParameterElementCrossReference_0_0; }

		//ID
		public RuleCall getParameterEParameterElementIDTerminalRuleCall_0_0_1() { return cParameterEParameterElementIDTerminalRuleCall_0_0_1; }

		//operator=OPERATORS
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//OPERATORS
		public RuleCall getOperatorOPERATORSEnumRuleCall_1_0() { return cOperatorOPERATORSEnumRuleCall_1_0; }

		//right=[EOperationUnit]
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//[EOperationUnit]
		public CrossReference getRightEOperationUnitCrossReference_2_0() { return cRightEOperationUnitCrossReference_2_0; }

		//ID
		public RuleCall getRightEOperationUnitIDTerminalRuleCall_2_0_1() { return cRightEOperationUnitIDTerminalRuleCall_2_0_1; }
	}

	public class ControlStatementElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlStatementElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageANY_OTHERTerminalRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ControlStatementElement returns EControlStatementElement:
		//	"Error" "(" "\"" message=ANY_OTHER "\"" ")";
		public ParserRule getRule() { return rule; }

		//"Error" "(" "\"" message=ANY_OTHER "\"" ")"
		public Group getGroup() { return cGroup; }

		//"Error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//message=ANY_OTHER
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }

		//ANY_OTHER
		public RuleCall getMessageANY_OTHERTerminalRuleCall_3_0() { return cMessageANY_OTHERTerminalRuleCall_3_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	public class UMAPDataTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UMAPDataTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBRANCHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBRANCHBRANCHKeyword_0_0 = (Keyword)cBRANCHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLIENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLIENTCLIENTKeyword_1_0 = (Keyword)cCLIENTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCURRENCYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCURRENCYCURRENCYKeyword_2_0 = (Keyword)cCURRENCYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNUMBERNUMBERKeyword_3_0 = (Keyword)cNUMBEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGSTRINGKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum UMAPDataTypes:
		//	BRANCH | CLIENT | CURRENCY | NUMBER | STRING;
		public EnumRule getRule() { return rule; }

		//BRANCH | CLIENT | CURRENCY | NUMBER | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//BRANCH
		public EnumLiteralDeclaration getBRANCHEnumLiteralDeclaration_0() { return cBRANCHEnumLiteralDeclaration_0; }

		//"BRANCH"
		public Keyword getBRANCHBRANCHKeyword_0_0() { return cBRANCHBRANCHKeyword_0_0; }

		//CLIENT
		public EnumLiteralDeclaration getCLIENTEnumLiteralDeclaration_1() { return cCLIENTEnumLiteralDeclaration_1; }

		//"CLIENT"
		public Keyword getCLIENTCLIENTKeyword_1_0() { return cCLIENTCLIENTKeyword_1_0; }

		//CURRENCY
		public EnumLiteralDeclaration getCURRENCYEnumLiteralDeclaration_2() { return cCURRENCYEnumLiteralDeclaration_2; }

		//"CURRENCY"
		public Keyword getCURRENCYCURRENCYKeyword_2_0() { return cCURRENCYCURRENCYKeyword_2_0; }

		//NUMBER
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_3() { return cNUMBEREnumLiteralDeclaration_3; }

		//"NUMBER"
		public Keyword getNUMBERNUMBERKeyword_3_0() { return cNUMBERNUMBERKeyword_3_0; }

		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }

		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_4_0() { return cSTRINGSTRINGKeyword_4_0; }
	}

	public class OPERATORSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATORS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cISEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cISIsKeyword_0_0 = (Keyword)cISEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTIsNotKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OPERATORS:
		//	IS="is" | NOT="is not";
		public EnumRule getRule() { return rule; }

		//IS="is" | NOT="is not"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IS="is"
		public EnumLiteralDeclaration getISEnumLiteralDeclaration_0() { return cISEnumLiteralDeclaration_0; }

		//"is"
		public Keyword getISIsKeyword_0_0() { return cISIsKeyword_0_0; }

		//NOT="is not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }

		//"is not"
		public Keyword getNOTIsNotKeyword_1_0() { return cNOTIsNotKeyword_1_0; }
	}
	
	private ProductElements pProduct;
	private CompilationUnitElements pCompilationUnit;
	private UseUnitElements pUseUnit;
	private NamespaceUnitElements pNamespaceUnit;
	private QUALIFIEDIDElements pQUALIFIEDID;
	private ProductUnitElements pProductUnit;
	private ParameterElementElements pParameterElement;
	private UMAPDataTypesElements unknownRuleUMAPDataTypes;
	private OperationUnitElements pOperationUnit;
	private ControlElementElements pControlElement;
	private ExpressionElementElements pExpressionElement;
	private OPERATORSElements unknownRuleOPERATORS;
	private ControlStatementElementElements pControlStatementElement;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProductGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ykb.umap.dsl.Product".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Product returns EProduct:
	//	elements+=CompilationUnit;
	public ProductElements getProductAccess() {
		return (pProduct != null) ? pProduct : (pProduct = new ProductElements());
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}

	//CompilationUnit returns ECompilationUnit:
	//	namespaceUnit=NamespaceUnit useUnit=UseUnit? productUnit=ProductUnit;
	public CompilationUnitElements getCompilationUnitAccess() {
		return (pCompilationUnit != null) ? pCompilationUnit : (pCompilationUnit = new CompilationUnitElements());
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//UseUnit returns EUseUnit:
	//	"use" productUnit=[EProductUnit|QUALIFIEDID];
	public UseUnitElements getUseUnitAccess() {
		return (pUseUnit != null) ? pUseUnit : (pUseUnit = new UseUnitElements());
	}
	
	public ParserRule getUseUnitRule() {
		return getUseUnitAccess().getRule();
	}

	//NamespaceUnit returns ENamespaceUnit:
	//	"namespace" name=QUALIFIEDID;
	public NamespaceUnitElements getNamespaceUnitAccess() {
		return (pNamespaceUnit != null) ? pNamespaceUnit : (pNamespaceUnit = new NamespaceUnitElements());
	}
	
	public ParserRule getNamespaceUnitRule() {
		return getNamespaceUnitAccess().getRule();
	}

	//QUALIFIEDID:
	//	ID ("." ID)*;
	public QUALIFIEDIDElements getQUALIFIEDIDAccess() {
		return (pQUALIFIEDID != null) ? pQUALIFIEDID : (pQUALIFIEDID = new QUALIFIEDIDElements());
	}
	
	public ParserRule getQUALIFIEDIDRule() {
		return getQUALIFIEDIDAccess().getRule();
	}

	//ProductUnit returns EProductUnit:
	//	"product" name=ID ("parameters" parameters+=ParameterElement*) operationUnit=OperationUnit;
	public ProductUnitElements getProductUnitAccess() {
		return (pProductUnit != null) ? pProductUnit : (pProductUnit = new ProductUnitElements());
	}
	
	public ParserRule getProductUnitRule() {
		return getProductUnitAccess().getRule();
	}

	//ParameterElement returns EParameterElement:
	//	name=ID (":" type=UMAPDataTypes)?;
	public ParameterElementElements getParameterElementAccess() {
		return (pParameterElement != null) ? pParameterElement : (pParameterElement = new ParameterElementElements());
	}
	
	public ParserRule getParameterElementRule() {
		return getParameterElementAccess().getRule();
	}

	//enum UMAPDataTypes:
	//	BRANCH | CLIENT | CURRENCY | NUMBER | STRING;
	public UMAPDataTypesElements getUMAPDataTypesAccess() {
		return (unknownRuleUMAPDataTypes != null) ? unknownRuleUMAPDataTypes : (unknownRuleUMAPDataTypes = new UMAPDataTypesElements());
	}
	
	public EnumRule getUMAPDataTypesRule() {
		return getUMAPDataTypesAccess().getRule();
	}

	//OperationUnit returns EOperationUnit:
	//	"operation" name=ID "is" ("controls" controls+=ControlElement)?;
	public OperationUnitElements getOperationUnitAccess() {
		return (pOperationUnit != null) ? pOperationUnit : (pOperationUnit = new OperationUnitElements());
	}
	
	public ParserRule getOperationUnitRule() {
		return getOperationUnitAccess().getRule();
	}

	//ControlElement returns EControlElement:
	//	expression=ExpressionElement "=>" controlStatement=ControlStatementElement;
	public ControlElementElements getControlElementAccess() {
		return (pControlElement != null) ? pControlElement : (pControlElement = new ControlElementElements());
	}
	
	public ParserRule getControlElementRule() {
		return getControlElementAccess().getRule();
	}

	//ExpressionElement returns EExpressionElement:
	//	parameter=[EParameterElement] operator=OPERATORS right=[EOperationUnit];
	public ExpressionElementElements getExpressionElementAccess() {
		return (pExpressionElement != null) ? pExpressionElement : (pExpressionElement = new ExpressionElementElements());
	}
	
	public ParserRule getExpressionElementRule() {
		return getExpressionElementAccess().getRule();
	}

	//enum OPERATORS:
	//	IS="is" | NOT="is not";
	public OPERATORSElements getOPERATORSAccess() {
		return (unknownRuleOPERATORS != null) ? unknownRuleOPERATORS : (unknownRuleOPERATORS = new OPERATORSElements());
	}
	
	public EnumRule getOPERATORSRule() {
		return getOPERATORSAccess().getRule();
	}

	//ControlStatementElement returns EControlStatementElement:
	//	"Error" "(" "\"" message=ANY_OTHER "\"" ")";
	public ControlStatementElementElements getControlStatementElementAccess() {
		return (pControlStatementElement != null) ? pControlStatementElement : (pControlStatementElement = new ControlStatementElementElements());
	}
	
	public ParserRule getControlStatementElementRule() {
		return getControlStatementElementAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
