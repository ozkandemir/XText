/*
* generated by Xtext
*/
package com.ykb.umap.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ProductGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UMAPDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UMAPDsl");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsCompilationUnitParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//UMAPDsl returns EProduct:
		//	elements+=CompilationUnit;
		public ParserRule getRule() { return rule; }

		//elements+=CompilationUnit
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//CompilationUnit
		public RuleCall getElementsCompilationUnitParserRuleCall_0() { return cElementsCompilationUnitParserRuleCall_0; }
	}

	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceUnitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceUnitNamespaceUnitParserRuleCall_0_0 = (RuleCall)cNamespaceUnitAssignment_0.eContents().get(0);
		private final Assignment cUseUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseUnitUseUnitParserRuleCall_1_0 = (RuleCall)cUseUnitAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cProductUnitAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cProductUnitProductUnitParserRuleCall_2_0_0 = (RuleCall)cProductUnitAssignment_2_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDataTypesDataTypeParserRuleCall_2_1_0 = (RuleCall)cDataTypesAssignment_2_1.eContents().get(0);
		
		//CompilationUnit returns ECompilationUnit:
		//	namespaceUnit=NamespaceUnit useUnit=UseUnit? (productUnit=ProductUnit | dataTypes+=DataType*);
		public ParserRule getRule() { return rule; }

		//namespaceUnit=NamespaceUnit useUnit=UseUnit? (productUnit=ProductUnit | dataTypes+=DataType*)
		public Group getGroup() { return cGroup; }

		//namespaceUnit=NamespaceUnit
		public Assignment getNamespaceUnitAssignment_0() { return cNamespaceUnitAssignment_0; }

		//NamespaceUnit
		public RuleCall getNamespaceUnitNamespaceUnitParserRuleCall_0_0() { return cNamespaceUnitNamespaceUnitParserRuleCall_0_0; }

		//useUnit=UseUnit?
		public Assignment getUseUnitAssignment_1() { return cUseUnitAssignment_1; }

		//UseUnit
		public RuleCall getUseUnitUseUnitParserRuleCall_1_0() { return cUseUnitUseUnitParserRuleCall_1_0; }

		//productUnit=ProductUnit | dataTypes+=DataType*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//productUnit=ProductUnit
		public Assignment getProductUnitAssignment_2_0() { return cProductUnitAssignment_2_0; }

		//ProductUnit
		public RuleCall getProductUnitProductUnitParserRuleCall_2_0_0() { return cProductUnitProductUnitParserRuleCall_2_0_0; }

		//dataTypes+=DataType*
		public Assignment getDataTypesAssignment_2_1() { return cDataTypesAssignment_2_1; }

		//DataType
		public RuleCall getDataTypesDataTypeParserRuleCall_2_1_0() { return cDataTypesDataTypeParserRuleCall_2_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterElementParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Assignment cOperationUnitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationUnitsOperationUnitParserRuleCall_3_0 = (RuleCall)cOperationUnitsAssignment_3.eContents().get(0);
		
		//DataType returns EDataType:
		//	"data" name=ID ("parameters" parameters+=ParameterElement*)? operationUnits+=OperationUnit*;
		public ParserRule getRule() { return rule; }

		//"data" name=ID ("parameters" parameters+=ParameterElement*)? operationUnits+=OperationUnit*
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("parameters" parameters+=ParameterElement*)?
		public Group getGroup_2() { return cGroup_2; }

		//"parameters"
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }

		//parameters+=ParameterElement*
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//ParameterElement
		public RuleCall getParametersParameterElementParserRuleCall_2_1_0() { return cParametersParameterElementParserRuleCall_2_1_0; }

		//operationUnits+=OperationUnit*
		public Assignment getOperationUnitsAssignment_3() { return cOperationUnitsAssignment_3; }

		//OperationUnit
		public RuleCall getOperationUnitsOperationUnitParserRuleCall_3_0() { return cOperationUnitsOperationUnitParserRuleCall_3_0; }
	}

	public class UseUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProductUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProductUnitEProductUnitCrossReference_1_0 = (CrossReference)cProductUnitAssignment_1.eContents().get(0);
		private final RuleCall cProductUnitEProductUnitQUALIFIEDIDParserRuleCall_1_0_1 = (RuleCall)cProductUnitEProductUnitCrossReference_1_0.eContents().get(1);
		
		//UseUnit returns EUseUnit:
		//	"use" productUnit=[EProductUnit|QUALIFIEDID];
		public ParserRule getRule() { return rule; }

		//"use" productUnit=[EProductUnit|QUALIFIEDID]
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//productUnit=[EProductUnit|QUALIFIEDID]
		public Assignment getProductUnitAssignment_1() { return cProductUnitAssignment_1; }

		//[EProductUnit|QUALIFIEDID]
		public CrossReference getProductUnitEProductUnitCrossReference_1_0() { return cProductUnitEProductUnitCrossReference_1_0; }

		//QUALIFIEDID
		public RuleCall getProductUnitEProductUnitQUALIFIEDIDParserRuleCall_1_0_1() { return cProductUnitEProductUnitQUALIFIEDIDParserRuleCall_1_0_1; }
	}

	public class NamespaceUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQUALIFIEDIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamespaceUnit returns ENamespaceUnit:
		//	"namespace" name=QUALIFIEDID;
		public ParserRule getRule() { return rule; }

		//"namespace" name=QUALIFIEDID
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QUALIFIEDID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QUALIFIEDID
		public RuleCall getNameQUALIFIEDIDParserRuleCall_1_0() { return cNameQUALIFIEDIDParserRuleCall_1_0; }
	}

	public class QUALIFIEDIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIEDID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QUALIFIEDID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ProductUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProductUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterElementParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Assignment cOperationUnitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationUnitsOperationUnitParserRuleCall_3_0 = (RuleCall)cOperationUnitsAssignment_3.eContents().get(0);
		
		//ProductUnit returns EProductUnit:
		//	"product" name=ID ("parameters" parameters+=ParameterElement*) operationUnits+=OperationUnit*;
		public ParserRule getRule() { return rule; }

		//"product" name=ID ("parameters" parameters+=ParameterElement*) operationUnits+=OperationUnit*
		public Group getGroup() { return cGroup; }

		//"product"
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"parameters" parameters+=ParameterElement*
		public Group getGroup_2() { return cGroup_2; }

		//"parameters"
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }

		//parameters+=ParameterElement*
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//ParameterElement
		public RuleCall getParametersParameterElementParserRuleCall_2_1_0() { return cParametersParameterElementParserRuleCall_2_1_0; }

		//operationUnits+=OperationUnit*
		public Assignment getOperationUnitsAssignment_3() { return cOperationUnitsAssignment_3; }

		//OperationUnit
		public RuleCall getOperationUnitsOperationUnitParserRuleCall_3_0() { return cOperationUnitsOperationUnitParserRuleCall_3_0; }
	}

	public class ParameterElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeEDataTypeCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeEDataTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeEDataTypeCrossReference_1_1_0.eContents().get(1);
		
		//ParameterElement returns EParameterElement:
		//	name=ID (":" type=[EDataType])?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" type=[EDataType])?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" type=[EDataType])?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=[EDataType]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//[EDataType]
		public CrossReference getTypeEDataTypeCrossReference_1_1_0() { return cTypeEDataTypeCrossReference_1_1_0; }

		//ID
		public RuleCall getTypeEDataTypeIDTerminalRuleCall_1_1_0_1() { return cTypeEDataTypeIDTerminalRuleCall_1_1_0_1; }
	}

	public class OperationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cControlsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControlsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlsControlElementParserRuleCall_3_1_0 = (RuleCall)cControlsAssignment_3_1.eContents().get(0);
		private final Keyword cBeginKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//OperationUnit returns EOperationUnit:
		//	"operation" name=ID "is" ("controls" controls+=ControlElement*)? "begin" statements+=Statement* "end";
		public ParserRule getRule() { return rule; }

		//"operation" name=ID "is" ("controls" controls+=ControlElement*)? "begin" statements+=Statement* "end"
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//("controls" controls+=ControlElement*)?
		public Group getGroup_3() { return cGroup_3; }

		//"controls"
		public Keyword getControlsKeyword_3_0() { return cControlsKeyword_3_0; }

		//controls+=ControlElement*
		public Assignment getControlsAssignment_3_1() { return cControlsAssignment_3_1; }

		//ControlElement
		public RuleCall getControlsControlElementParserRuleCall_3_1_0() { return cControlsControlElementParserRuleCall_3_1_0; }

		//"begin"
		public Keyword getBeginKeyword_4() { return cBeginKeyword_4; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cStatementTestKeyword_0 = (Keyword)cStatementAssignment.eContents().get(0);
		
		//Statement returns EStatement:
		//	statement="Test";
		public ParserRule getRule() { return rule; }

		//statement="Test"
		public Assignment getStatementAssignment() { return cStatementAssignment; }

		//"Test"
		public Keyword getStatementTestKeyword_0() { return cStatementTestKeyword_0; }
	}

	public class ControlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionElementParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlStatementControlStatementElementParserRuleCall_2_0 = (RuleCall)cControlStatementAssignment_2.eContents().get(0);
		
		//ControlElement returns EControlElement:
		//	expression=ExpressionElement "=>" controlStatement=ControlStatementElement;
		public ParserRule getRule() { return rule; }

		//expression=ExpressionElement "=>" controlStatement=ControlStatementElement
		public Group getGroup() { return cGroup; }

		//expression=ExpressionElement
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//ExpressionElement
		public RuleCall getExpressionExpressionElementParserRuleCall_0_0() { return cExpressionExpressionElementParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//controlStatement=ControlStatementElement
		public Assignment getControlStatementAssignment_2() { return cControlStatementAssignment_2; }

		//ControlStatementElement
		public RuleCall getControlStatementControlStatementElementParserRuleCall_2_0() { return cControlStatementControlStatementElementParserRuleCall_2_0; }
	}

	public class ExpressionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterEParameterElementCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterEParameterElementIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterEParameterElementCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOPERATORSEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightEOperationUnitCrossReference_2_0 = (CrossReference)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightEOperationUnitIDTerminalRuleCall_2_0_1 = (RuleCall)cRightEOperationUnitCrossReference_2_0.eContents().get(1);
		
		//ExpressionElement returns EExpressionElement:
		//	parameter=[EParameterElement] operator=OPERATORS right=[EOperationUnit];
		public ParserRule getRule() { return rule; }

		//parameter=[EParameterElement] operator=OPERATORS right=[EOperationUnit]
		public Group getGroup() { return cGroup; }

		//parameter=[EParameterElement]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[EParameterElement]
		public CrossReference getParameterEParameterElementCrossReference_0_0() { return cParameterEParameterElementCrossReference_0_0; }

		//ID
		public RuleCall getParameterEParameterElementIDTerminalRuleCall_0_0_1() { return cParameterEParameterElementIDTerminalRuleCall_0_0_1; }

		//operator=OPERATORS
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//OPERATORS
		public RuleCall getOperatorOPERATORSEnumRuleCall_1_0() { return cOperatorOPERATORSEnumRuleCall_1_0; }

		//right=[EOperationUnit]
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//[EOperationUnit]
		public CrossReference getRightEOperationUnitCrossReference_2_0() { return cRightEOperationUnitCrossReference_2_0; }

		//ID
		public RuleCall getRightEOperationUnitIDTerminalRuleCall_2_0_1() { return cRightEOperationUnitIDTerminalRuleCall_2_0_1; }
	}

	public class ControlStatementElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlStatementElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cErrorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cErrorXStringLiteralParserRuleCall_1_0 = (RuleCall)cErrorAssignment_1.eContents().get(0);
		
		//ControlStatementElement returns EControlStatementElement:
		//	"Error" error=XStringLiteral;
		public ParserRule getRule() { return rule; }

		//"Error" error=XStringLiteral
		public Group getGroup() { return cGroup; }

		//"Error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//error=XStringLiteral
		public Assignment getErrorAssignment_1() { return cErrorAssignment_1; }

		//XStringLiteral
		public RuleCall getErrorXStringLiteralParserRuleCall_1_0() { return cErrorXStringLiteralParserRuleCall_1_0; }
	}
	
	
	public class UMAPDataTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UMAPDataTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBRANCHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBRANCHBRANCHKeyword_0_0 = (Keyword)cBRANCHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLIENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLIENTCLIENTKeyword_1_0 = (Keyword)cCLIENTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCURRENCYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCURRENCYCURRENCYKeyword_2_0 = (Keyword)cCURRENCYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNUMBERNUMBERKeyword_3_0 = (Keyword)cNUMBEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGSTRINGKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum UMAPDataTypes:
		//	BRANCH | CLIENT | CURRENCY | NUMBER | STRING;
		public EnumRule getRule() { return rule; }

		//BRANCH | CLIENT | CURRENCY | NUMBER | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//BRANCH
		public EnumLiteralDeclaration getBRANCHEnumLiteralDeclaration_0() { return cBRANCHEnumLiteralDeclaration_0; }

		//"BRANCH"
		public Keyword getBRANCHBRANCHKeyword_0_0() { return cBRANCHBRANCHKeyword_0_0; }

		//CLIENT
		public EnumLiteralDeclaration getCLIENTEnumLiteralDeclaration_1() { return cCLIENTEnumLiteralDeclaration_1; }

		//"CLIENT"
		public Keyword getCLIENTCLIENTKeyword_1_0() { return cCLIENTCLIENTKeyword_1_0; }

		//CURRENCY
		public EnumLiteralDeclaration getCURRENCYEnumLiteralDeclaration_2() { return cCURRENCYEnumLiteralDeclaration_2; }

		//"CURRENCY"
		public Keyword getCURRENCYCURRENCYKeyword_2_0() { return cCURRENCYCURRENCYKeyword_2_0; }

		//NUMBER
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_3() { return cNUMBEREnumLiteralDeclaration_3; }

		//"NUMBER"
		public Keyword getNUMBERNUMBERKeyword_3_0() { return cNUMBERNUMBERKeyword_3_0; }

		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }

		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_4_0() { return cSTRINGSTRINGKeyword_4_0; }
	}

	public class OPERATORSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATORS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cISEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cISIsKeyword_0_0 = (Keyword)cISEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTNotKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OPERATORS:
		//	IS="is" | NOT="not";
		public EnumRule getRule() { return rule; }

		//IS="is" | NOT="not"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IS="is"
		public EnumLiteralDeclaration getISEnumLiteralDeclaration_0() { return cISEnumLiteralDeclaration_0; }

		//"is"
		public Keyword getISIsKeyword_0_0() { return cISIsKeyword_0_0; }

		//NOT="not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }

		//"not"
		public Keyword getNOTNotKeyword_1_0() { return cNOTNotKeyword_1_0; }
	}
	
	private UMAPDslElements pUMAPDsl;
	private CompilationUnitElements pCompilationUnit;
	private DataTypeElements pDataType;
	private UseUnitElements pUseUnit;
	private NamespaceUnitElements pNamespaceUnit;
	private QUALIFIEDIDElements pQUALIFIEDID;
	private ProductUnitElements pProductUnit;
	private ParameterElementElements pParameterElement;
	private UMAPDataTypesElements unknownRuleUMAPDataTypes;
	private OperationUnitElements pOperationUnit;
	private StatementElements pStatement;
	private ControlElementElements pControlElement;
	private ExpressionElementElements pExpressionElement;
	private OPERATORSElements unknownRuleOPERATORS;
	private ControlStatementElementElements pControlStatementElement;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public ProductGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ykb.umap.dsl.Product".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//UMAPDsl returns EProduct:
	//	elements+=CompilationUnit;
	public UMAPDslElements getUMAPDslAccess() {
		return (pUMAPDsl != null) ? pUMAPDsl : (pUMAPDsl = new UMAPDslElements());
	}
	
	public ParserRule getUMAPDslRule() {
		return getUMAPDslAccess().getRule();
	}

	//CompilationUnit returns ECompilationUnit:
	//	namespaceUnit=NamespaceUnit useUnit=UseUnit? (productUnit=ProductUnit | dataTypes+=DataType*);
	public CompilationUnitElements getCompilationUnitAccess() {
		return (pCompilationUnit != null) ? pCompilationUnit : (pCompilationUnit = new CompilationUnitElements());
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//DataType returns EDataType:
	//	"data" name=ID ("parameters" parameters+=ParameterElement*)? operationUnits+=OperationUnit*;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//UseUnit returns EUseUnit:
	//	"use" productUnit=[EProductUnit|QUALIFIEDID];
	public UseUnitElements getUseUnitAccess() {
		return (pUseUnit != null) ? pUseUnit : (pUseUnit = new UseUnitElements());
	}
	
	public ParserRule getUseUnitRule() {
		return getUseUnitAccess().getRule();
	}

	//NamespaceUnit returns ENamespaceUnit:
	//	"namespace" name=QUALIFIEDID;
	public NamespaceUnitElements getNamespaceUnitAccess() {
		return (pNamespaceUnit != null) ? pNamespaceUnit : (pNamespaceUnit = new NamespaceUnitElements());
	}
	
	public ParserRule getNamespaceUnitRule() {
		return getNamespaceUnitAccess().getRule();
	}

	//QUALIFIEDID:
	//	ID ("." ID)*;
	public QUALIFIEDIDElements getQUALIFIEDIDAccess() {
		return (pQUALIFIEDID != null) ? pQUALIFIEDID : (pQUALIFIEDID = new QUALIFIEDIDElements());
	}
	
	public ParserRule getQUALIFIEDIDRule() {
		return getQUALIFIEDIDAccess().getRule();
	}

	//ProductUnit returns EProductUnit:
	//	"product" name=ID ("parameters" parameters+=ParameterElement*) operationUnits+=OperationUnit*;
	public ProductUnitElements getProductUnitAccess() {
		return (pProductUnit != null) ? pProductUnit : (pProductUnit = new ProductUnitElements());
	}
	
	public ParserRule getProductUnitRule() {
		return getProductUnitAccess().getRule();
	}

	//ParameterElement returns EParameterElement:
	//	name=ID (":" type=[EDataType])?;
	public ParameterElementElements getParameterElementAccess() {
		return (pParameterElement != null) ? pParameterElement : (pParameterElement = new ParameterElementElements());
	}
	
	public ParserRule getParameterElementRule() {
		return getParameterElementAccess().getRule();
	}

	//enum UMAPDataTypes:
	//	BRANCH | CLIENT | CURRENCY | NUMBER | STRING;
	public UMAPDataTypesElements getUMAPDataTypesAccess() {
		return (unknownRuleUMAPDataTypes != null) ? unknownRuleUMAPDataTypes : (unknownRuleUMAPDataTypes = new UMAPDataTypesElements());
	}
	
	public EnumRule getUMAPDataTypesRule() {
		return getUMAPDataTypesAccess().getRule();
	}

	//OperationUnit returns EOperationUnit:
	//	"operation" name=ID "is" ("controls" controls+=ControlElement*)? "begin" statements+=Statement* "end";
	public OperationUnitElements getOperationUnitAccess() {
		return (pOperationUnit != null) ? pOperationUnit : (pOperationUnit = new OperationUnitElements());
	}
	
	public ParserRule getOperationUnitRule() {
		return getOperationUnitAccess().getRule();
	}

	//Statement returns EStatement:
	//	statement="Test";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ControlElement returns EControlElement:
	//	expression=ExpressionElement "=>" controlStatement=ControlStatementElement;
	public ControlElementElements getControlElementAccess() {
		return (pControlElement != null) ? pControlElement : (pControlElement = new ControlElementElements());
	}
	
	public ParserRule getControlElementRule() {
		return getControlElementAccess().getRule();
	}

	//ExpressionElement returns EExpressionElement:
	//	parameter=[EParameterElement] operator=OPERATORS right=[EOperationUnit];
	public ExpressionElementElements getExpressionElementAccess() {
		return (pExpressionElement != null) ? pExpressionElement : (pExpressionElement = new ExpressionElementElements());
	}
	
	public ParserRule getExpressionElementRule() {
		return getExpressionElementAccess().getRule();
	}

	//enum OPERATORS:
	//	IS="is" | NOT="not";
	public OPERATORSElements getOPERATORSAccess() {
		return (unknownRuleOPERATORS != null) ? unknownRuleOPERATORS : (unknownRuleOPERATORS = new OPERATORSElements());
	}
	
	public EnumRule getOPERATORSRule() {
		return getOPERATORSAccess().getRule();
	}

	//ControlStatementElement returns EControlStatementElement:
	//	"Error" error=XStringLiteral;
	public ControlStatementElementElements getControlStatementElementAccess() {
		return (pControlStatementElement != null) ? pControlStatementElement : (pControlStatementElement = new ControlStatementElementElements());
	}
	
	public ParserRule getControlStatementElementRule() {
		return getControlStatementElementAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
